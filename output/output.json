{
  "Transcript": "Perhaps you've been too busy for open Source, or your GitHub account is just sitting there and gathering dust while you concentrate on finishing college. In this video, I'll teach you how to transform your contribution graph from this to this before diving into the code, let us understand how GitHub stores when a commit happens when you create commits in your repositories, each commit is associated with timestamps. In this tutorial, we will automate lots of commits and link them to past dates so GitHub recognizes them as contributions that you made in the past. I'll also teach you how you can create art like this on your GitHub profile. Now, before we begin, here's a short disclaimer. This content is intended solely for educational purposes and to show how easy it is to fake your profile on the Internet. I do not endorse using it to gain an unfair advantage over others. As you can see, this is a new GitHub account I created some days ago. First thing you want to do is create a private GitHub repository. You can do this by going to GitHub.com new once you have your repository, clone it in your favorite code editor. Now initialize a node project with NPM init y and create a JavaScript file. Now create another JSON file to store all the commit timestamp data. I like using modules instead of common js, so I'll just go ahead and add that in the package JSON and we'll use the following NPM modules so you can install all of them with this command. I'll explain their use as we code first of all we import the JSON file module. Then we make another constant which stores the path of the JSON file. Then we make another constant called date which stores the timestamp in which, which is similar to what GitHub stores internally. Moment format basically returns that timestamp that we need. Then we make a constant called data which we'll be pushing which has the date as attribute and this date is this constant that we are pushing putting over there. Next we are writing JSON write file which accepts two parameters. One of them is path and another is data. Now we'll run this file to check if the data JSON is populated. Now that we are able to add data to this JSON file, we'll have to add commit and finally push these to the remote. To do this we'll use a simple module called simple git and we'll add it using this NPM command. Now we'll also import it here. Now to commit, we'll use Simplegit's simple commands to do it. Simplegit add takes a list of files in an array, and in our case that would be just our file's path because that's the only single file that we have. And then the commit method takes a commit message as a first parameter which I'll set to the date. And this is how it internally stores commits. And finally we'll add a push method to see these changes on our remote repo that we created earlier. As you can see, we have our dummy files pushed here with the current date and a commit has happened. Now that we are able to make commits, let's make a commit to yesterday. Now we can do this by using the moment subtract method, which can subtract days, months or even weeks or even years to any timestamp. Also, it's always a good practice to use asynchronous functions when dealing with file reads and writes. In this situation, we can add a callback function as a third parameter inside and push only if the file write is successful. Alright. Now as you must have guessed now that we can manipulate these dates and make commits to any time, we can now further improve this by pinpointing these to the x and y axis of the contribution graph. So for example, if I wanted to make commits to the top left corner of the last year, I would simply have to write 00 and we would generate one over there. To do this we'll write something like this. Now if you notice here the only two changes I've made here is adding these two functions to the code. Now what these do is when you add X weeks we can move horizontally and when you add Y number of days we can move vertically in the contribution graph. Now when I run mark commit 2, 3, you can see that there is a commit that has been created over here. So this is how you can write anything on the X and Y coordinates to maybe print out your name or generate any kind of art that you want to. We also know that you can play around with the gradients of the colors. As many commits you'll have on the same point, it will be a darker shade of green. And maybe try converting an input string to a XY mapped contribution graph. And now for the exciting part, to generate a random looking contribution graph that looks legit, we'll use the same function and make some tweaks to it. Like this, we're using the npm's random module here, so you might want to import that if you're using it here. What I did here is there are 54 weeks in a year, so 0 to 54 it will just generate any number of x and any number of day. We also don't want to push every time a commit has been made because that increases the overhead and it takes time to do a push. So we'll just remove that and we'll make all of the commits together and then we can bind it later. We will also have to add a base condition to terminate this recursive code that we have written. For that I'll add this code. This will simply push the code when the terminating condition is hit. Now if I go and run this, this should create 100 commits on my repo. You can create as many as you want and play with the density of this. If I make 100 more it would look something like this with 100 more like this and so on. You also want to make sure your show private contributions option is turned on in GitHub settings or else these private repo contributions won't show. And that was it for this video. Let me know in the comments if I should make one on getting all the badges in gith. If you found this video helpful, leave a like and subscribe for more videos like this.",
  "Summarization": "This video tutorial demonstrates how to manipulate a GitHub contribution graph to display a desired pattern, including generating \"art.\" It begins by explaining how GitHub tracks commits using timestamps, which is crucial for understanding the method. The tutorial then guides viewers through automating commits and associating them with past dates, effectively creating contributions that appear historically accurate on a GitHub profile. The core of the process involves setting up a Node.js project, initializing it with npm, and creating a JavaScript file. Additionally, a JSON file is used to store commit timestamp data. The video highlights the use of specific npm modules, explaining their purpose within the code. The content emphasizes that this technique is purely for educational purposes to showcase how easily one can create an appearance on the internet that may not reflect reality.\n",
  "Notes": "Topic: GitHub Contribution Graph Manipulation\n\nThe GitHub contribution graph visually represents a user's activity on the platform, showing the number of commits made on specific days. This tutorial focuses on manipulating this graph to display a desired pattern or \"art.\" Understanding how GitHub tracks commits is essential; each commit is associated with a timestamp. By controlling these timestamps, you can effectively alter the appearance of your contribution graph. This technique involves automating commits and linking them to past dates, making them appear as if they were made historically. The motivation behind the tutorial is primarily educational, to highlight how easily one can create an appearance of activity on the internet that may not reflect reality.\n\n*   The contribution graph visually represents a user's commit history.\n*   Manipulating this graph involves controlling commit timestamps.\n*   The primary goal is to demonstrate the ability to fake contributions.\n*   Automation is key for creating a large number of commits over time.\n*   This aims to show how easy it is to create an illusion of activity.\n\nTopic: Timestamps in GitHub Commits\n\nGitHub stores each commit with a timestamp, which is a crucial element for understanding the process of manipulating the contribution graph. This timestamp records the date and time when the commit was made. The contribution graph uses these timestamps to determine where to place the contributions visually. By manipulating the timestamps associated with commits, you can influence how your contributions are displayed on your profile. This tutorial leverages timestamps to make it appear that you made commits in the past or on specific dates. The core idea is to mimic how GitHub itself stores this data, thus fooling the system and making you appear active on certain days of the past, regardless of the actual commit date.\n\n*   Each commit is paired with a timestamp by GitHub.\n*   The timestamp dictates the position on the contribution graph.\n*   Manipulating timestamps allows for control over the graph's appearance.\n*   The technique involves associating commits with past dates.\n*   The focus here is on mirroring GitHub's method of storing data.\n\nTopic: Automating Commits\n\nAutomating commits is central to creating the desired patterns on the GitHub contribution graph. This tutorial outlines how to generate numerous commits and associate them with specific dates, creating an illusion of historical activity. Automation is a necessity because manually creating and dating many commits for a significant pattern would be extremely time-consuming. The tutorial will likely involve scripts or programs to generate commits and control their timestamps. You will need to utilize a scripting language like JavaScript with tools like Node.js to achieve the desired effect. This process is used to populate the graph and visually represent contributions over time.\n\n*   Automation is crucial for generating numerous commits.\n*   Scripts are typically used to create and date commits.\n*   The focus is on creating the appearance of a long history.\n*   Automated commits link with past dates.\n*   This allows for the creation of complex contribution patterns.\n\nTopic: Node.js Project Setup\n\nThe tutorial uses Node.js and npm to set up a project, demonstrating that the technique uses JavaScript to manipulate the GitHub contribution graph. You'll initialize a new project using 'npm init -y' and this creates a package.json file. Then, you'll create a JavaScript file, which will likely contain the logic for generating and dating the commits. This setup provides the necessary environment to run scripts that control the commit process. This approach is favored because it provides flexibility, and many readily available modules exist to make tasks like file manipulation and system calls easier, thus streamlining the commit process.\n\n*   Node.js and npm are used to set up the project.\n*   'npm init -y' initializes the project and creates a package.json file.\n*   The JavaScript file holds the commit generation logic.\n*   This environment facilitates the creation of the manipulation scripts.\n*   It provides access to useful modules for file handling.\n\nTopic: Using JSON Files for Commit Data\n\nThe tutorial employs JSON files to store commit timestamp data. This file likely acts as a data source, containing information about the dates and times to which commits should be assigned. The JSON format is well-suited for storing structured data, making it easy to manage and parse the commit information. The JSON file enables you to define the pattern of commits you want to create and is accessible to be read by the JavaScript code. JSON is commonly used for configuration files and is a straightforward way to define the timestamps for the commits, making it easier to design different visual patterns on the GitHub contribution graph.\n\n*   JSON files store the commit timestamp data.\n*   The files define the desired commit pattern.\n*   JSON is suitable for storing structured data.\n*   The file is read by the JavaScript code.\n*   It makes it easy to plan out different patterns.\n\nTopic: Using NPM Modules\n\nThe video involves the use of various npm modules to facilitate the GitHub contribution graph manipulation process. These modules provide specific functionalities, such as interacting with the file system, creating commits, and manipulating timestamps. The tutorial explains how these modules are installed using 'npm install' and likely explains their individual roles within the JavaScript code. Understanding the use of these modules is crucial for replicating the technique. Each module serves a specific purpose in the code. The use of npm modules demonstrates an effective software development practice, which reuses functionality developed by others.\n\n*   npm modules provide specific functionalities.\n*   The modules are installed via 'npm install'.\n*   These modules support file management and timestamp handling.\n*   Knowing these modules is essential to use this technique.\n*   Modules represent efficient code reuse.\n",
  "NotesFile": "C:\\Users\\debar\\OneDrive\\Desktop\\EB\\EduBrief\\output\\notes.docx"
}